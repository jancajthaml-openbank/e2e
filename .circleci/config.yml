version: 2

# ---------------------------------------------------------------------------- #

workflows:

  version: 2

  commit:
    jobs:
      - performance
      - bbtest
      - report:
          requires:
            - performance

  rolling_contract:
    triggers:
      - schedule:
          cron: "0,5,10,15,20,25,30,35,40,45,50,55 * * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - bbtest

  rolling_performance:
    triggers:
      - schedule:
          cron: "0,15,30,45 * * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - performance
      - report:
          requires:
            - performance

# ---------------------------------------------------------------------------- #

jobs:

  # -------------------------------------------------------------------------- #

  report:

    machine: true

    environment:
      - METRICS_PATH: /home/circleci/project/reports/metrics

    working_directory: /home/circleci/project

    steps:

      - attach_workspace:
          at: /home/circleci/project/reports

      - run:
          name: Regenerate reports
          command: |
            if [ ! -d ${METRICS_PATH} ] ; then
              exit 1
            fi

            ls -1 ${METRICS_PATH}

            git config --global user.email "jan.cajthaml@gmail.com"
            git config --global user.name "CircleCI e2e rolling update"

            git clone git@github.com:jancajthaml-openbank/health-check.git

            cp -r ${METRICS_PATH} health-check/reports

            cd health-check
            python generate_metrics_report.py > README.md

            git checkout --orphan rolling

            git add -A
            git commit -am "circleci e2e rolling update of reports"
            git push -f origin rolling
            git branch -D master
            git branch -m master
            git push -f origin master
            git push origin --delete rolling

  # -------------------------------------------------------------------------- #

  performance:

    machine: true

    environment:
      - PERSISTENCE_PATH: /home/circleci/project/data
      - LOGS_PATH: /home/circleci/project/logs
      - METRICS_PATH: /home/circleci/project/metrics
      - TENANT: performance
      - MAX_PARALLELISM: 10

    working_directory: /home/circleci/project

    steps:

      - checkout

      - run:
          name: Prepare performance tests
          command: |
            pull() {
              echo "pulling ${1}:${2}"
              docker pull ${1}:${2}
            }

            pull openbank/vault master &
            pull openbank/lake master &
            pull openbank/wall master &
            pull openbank/search master &
            wait

            cd perf && docker build -t e2e_perf .

            mkdir -p ${LOGS_PATH} ${PERSISTENCE_PATH} ${METRICS_PATH}

      - run:
          name: Run performance tests
          command: |
            VAULTS=()

            trim() {
              local var="$*"

              var="${var#"${var%%[![:space:]]*}"}"
              var="${var%"${var##*[![:space:]]}"}"
              echo -n "$var"
            }

            # FIXME currently unused but will be used in future for random tenant name
            rand_alnum() {
              LC_ALL=C tr -dc 'A-Z0-9' </dev/urandom | head -c 13 ; echo
            }

            spawn() {
              local image="${1}"
              local args="${@:2}"
              container=$(spawn_${image} ${args})
              if [ -z ${container} ] && [[ $(trim $(docker inspect -f "{{.State.Running}}" ${container} 2>/dev/null)) != "true" ]] ; then
                exit 1
              fi

              echo ${container}
            }

            spawn_lake() {
              local name="lake_$1"

              # FIXME as a part of e2e testing "publish" and "subscribe" of lake should
              # be parametric

              docker run \
                -d \
                -h lake \
                -v ${LOGS_PATH}:/logs \
                -v ${METRICS_PATH}:/opt/metrics \
                -e LAKE_LOG_LEVEL=INFO \
                -e LAKE_METRICS_OUTPUT=/opt/metrics/metrics_perf_${name}.json \
                --net=e2e_bridge \
                --net-alias=lake \
                --privileged \
                --name=performance_${name} \
                --publish 5562:5562 \
                --publish 5561:5561 \
              \
              openbank/lake:master
            }

            spawn_wall() {
              local name="wall_$1"

              # FIXME not ideal to have single wall and hardcoded http port, consider haproxy

              docker run \
                -d \
                -h ${name} \
                -e HOSTNAME=${name} \
                -e WALL_LAKE_HOSTNAME=lake \
                -e WALL_STORAGE=/data \
                -e WALL_LOG_LEVEL=INFO \
                -e WALL_METRICS_OUTPUT=/opt/metrics/metrics_perf_${name}.json \
                -v ${PERSISTENCE_PATH}:/data \
                -v ${LOGS_PATH}:/logs \
                -v ${METRICS_PATH}:/opt/metrics \
                --net=e2e_bridge \
                --net-alias=${name} \
                --name=performance_${name} \
                --publish 8080:8080 \
              \
              openbank/wall:master
            }

            spawn_vault() {
              local name="vault_$1"

              docker run \
                -d \
                -h ${name} \
                -e VAULT_LAKE_HOSTNAME=lake \
                -e VAULT_STORAGE=/data \
                -e VAULT_LOG_LEVEL=INFO \
                -e VAULT_JOURNAL_SATURATION=10 \
                -e VAULT_SNAPSHOT_SCANINTERVAL=1s \
                -e VAULT_TENANT=${TENANT}_${1} \
                -e VAULT_METRICS_REFRESHRATE=10s \
                -e VAULT_METRICS_OUTPUT=/opt/metrics/metrics_perf_${name}.json \
                -v ${PERSISTENCE_PATH}:/data \
                -v ${LOGS_PATH}:/logs \
                -v ${METRICS_PATH}:/opt/metrics \
                --net=e2e_bridge \
                --net-alias=${name} \
                --name=performance_${name} \
              \
              openbank/vault:master
            }

            teardown_service() {
              local name="${1}"
              local container="${2}"

              if [ -z ${container} ] || [[ "${container}" =~ [^a-z0-9] ]] ; then
                return
              fi

              echo "stopping $name container gracefully"
              (docker kill --signal="TERM" ${container} >/dev/null 2>&1 || :)
              echo "storing logs to ${LOGS_PATH}/perf_${name}.log"
              docker logs $container &> ${LOGS_PATH}/perf_${name}.log
            }

            teardown_lake() {
              local name="${1}"
              local container="${2}"

              if [ -z ${container} ] || [[ "${container}" =~ [^a-z0-9] ]] ; then
                return
              fi

              echo "stopping $name container gracefully"
              (docker kill --signal="TERM" ${container} >/dev/null 2>&1 || :)
              echo "storing logs to ${LOGS_PATH}/perf_${name}.log"
              docker logs $container &> ${LOGS_PATH}/perf_${name}.log
              (docker exec $container journalctl -u lake.service -b | cat >>${LOGS_PATH}/perf_${name}.log 2>&1) 2>/dev/null
            }

            post_stop() {
              if [ -z $at_most_once ] ; then
                echo ""

                at_most_once=true

                teardown_service wall ${wall_container}

                for i in "${!VAULTS[@]}"; do
                  teardown_service vault_$((i+1)) ${VAULTS[$i]}
                done

                teardown_lake lake ${lake_container}

                teardown_service test $(docker ps -a | grep openbank/dev:perf | awk '{print $1}')

                exit 0
              fi
            }

            ################################################################################

            trap exit INT TERM
            trap post_stop EXIT

            ################################################################################

            docker network create e2e_bridge &> /dev/null || :

            lake_container=$(spawn lake 1)

            for ((i=1;i<=5;i++)) ; do
              VAULTS+=($(spawn vault $i))
            done

            wall_container=$(spawn wall 1 1)

            docker run \
              -t \
              -e LAKE_HOSTNAME=lake \
              -e HTTP_ENTRYPOINT=wall_1:8080 \
              -e TENANT=${TENANT} \
              -e MAX_PARALLELISM=${MAX_PARALLELISM} \
              -e TTY=${TTY} \
              -v /var/run/docker.sock:/var/run/docker.sock \
              -v ${PERSISTENCE_PATH}:/data \
              -v ${LOGS_PATH}:/logs \
              -v ${METRICS_PATH}:/opt/metrics \
              --net=e2e_bridge \
              e2e_perf

      - run: (docker rm -f $(docker ps -aq) 2> /dev/null || :) &> /dev/null

      - store_artifacts:
          path: /home/circleci/project/metrics
          destination: metrics

      - store_artifacts:
          path: /home/circleci/project/logs
          destination: logs

      - persist_to_workspace:
          root: .
          paths:
            - metrics
            - logs

  # -------------------------------------------------------------------------- #

  bbtest:

    machine: true

    working_directory: /home/circleci/project

    steps:

      - checkout

      - run:
          name: Prepare blackbox tests
          command: |
            pull() {
              echo "pulling ${1}:${2}"
              docker pull ${1}:${2}
            }

            pull openbank/vault master &
            pull openbank/lake master &
            pull openbank/wall master &
            pull openbank/search master &
            pull mongo latest &
            wait

            (docker rm -f $(docker-compose ps -q) 2> /dev/null || :) &> /dev/null

            docker-compose build bbtest

      - run:
          name: Run blackbox tests
          command: |
            mkdir -p /tmp
            VERSION=master \
            \
            docker-compose run --rm bbtest

      - run : if [ ! -d reports ] ; then exit 1 ; fi

      - store_test_results:
          path: /home/circleci/project/bbtest

      - store_artifacts:
          path: /home/circleci/project/reports
          destination: reports

      - persist_to_workspace:
          root: .
          paths:
            - reports

      - run: (docker rm -f $(docker-compose ps -q) 2> /dev/null || :) &> /dev/null

      - run: (docker rm -f $(docker ps -aqf "name=bbtest") || :) &> /dev/null

# ---------------------------------------------------------------------------- #
